#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <algorithm>
using namespace std; // namespace std 사용

class Book {
public:
	string title;
    string author;

    Book(const string& title, const string& author)
        : title(title), author(author) {}

    // map을 사용하기 위해 <연산자 추가
    bool operator<(const Book& other) const {
        return tie(title, author) < tie(other.title, other.author);
    }
};

class BookManager {
private:
    vector<Book> books; // 책 목록 저장

public:
	// 책 추가 메서드
	void addBook(const string& title, const string& author) {
		books.push_back(Book(title, author)); // push_back 사용
		cout << "책이 추가되었습니다: " << title << " by " << author << endl;
	}
     
	// 모든 책 출력 메서드
	void displayAllBooks() const {
		if (books.empty()) {
            cout << "현재 등록된 책이 없습니다." << endl;
            return;
        }

        cout << "현재 도서 목록:" << endl;
        for (size_t i = 0; i < books.size(); i++) { // 일반적인 for문 사용
            cout << "- " << books[i].title << " by " << books[i].author << endl;
        }
    }

    // 책 제목으로 검색 메서드
    void searchByTitle(const string& title) {
        for (size_t i = 0; i < books.size(); i++) {
            if (books[i].title == title) {
                cout << "- " << books[i].title << " by " << books[i].author << " 책이 있습니다." << endl;
                return;
            }
        }
        cout << "제목이 " << title << "인 책이 존재하지 않습니다." << endl;
        cout << "철자가 올바른지 확인 후 다시 검색해보세요." << endl;
    }

    // 작가로 검색 메서드
    void searchByAuthor(const string& author) {
        for (size_t i = 0; i < books.size(); i++) {
            if (books[i].author == author) {
                cout << "- " << books[i].title << " by " << books[i].author << " 책이 있습니다." << endl;
                return;
            }
        }
        cout << "작가 이름이 " << author << "인 책이 존재하지 않습니다." << endl;
        cout << "철자가 올바른지 확인 후 다시 검색해보세요." << endl;
    }


    Book* findBookByTitle(const string& title) {
        for (size_t i = 0; i < books.size(); i++) {
            if (books[i].title == title) {
                return &books[i];
            }
        }
        return nullptr;
    }

    Book* findBookByAuthor(const string& author) {
        for (size_t i = 0; i < books.size(); i++) {
            if (books[i].author == author) {
                return &books[i];
            }
        }
        return nullptr;
    }
};

class BorrowManager {
private:
    map<Book, int> stock;
    int maxQuantity = 3;

public:
    // 책 추가시 재고 동기화
    void initializeStock(const Book& book, int quantity) {
        stock[book] = maxQuantity;
	}

	// 재고가 1개 이상이면 대여 여부 묻고 대여하면 재고-1
    void borrowBook(const string& titleOrAuthor) {
        for (map<Book, int>::iterator it = stock.begin(); it != stock.end(); ++it) {
            if ((it->first.title == titleOrAuthor || it->first.author == titleOrAuthor) && it->second >= 1) {
                cout << "대여하시겠습니까?" << endl;
                cout << "예 : 1 ========= 아니오 : 2" << endl;
                int choice;
                cin >> choice;
                if (choice == 1) {
                    it->second--;
                    cout << "대여가 완료되었습니다. 남은 재고 : "<< it->second << endl;
                }
                else {
                    cout << "대여를 취소했습니다." << endl;
                }
                return;
            }
        }
            cout << "대여 가능한 책이 없습니다." << endl;
    }

	// 재고가 3미만인 책이면 반납 여부 묻고 반납하면 재고+1
    void returnBook(const string& titleOrAuthor) {
        for (map<Book, int>::iterator it = stock.begin(); it != stock.end(); ++it) {
            if ((it->first.title == titleOrAuthor || it->first.author == titleOrAuthor) && it->second < 3) {
                cout << "반납하시겠습니까?" << endl;
                cout << "예 : 1 ========= 아니오 : 2" << endl;
                int choice;
                cin >> choice;
                if (choice == 1) {
                    it->second++;
                    cout << "반납이 완료되었습니다. 현재 재고 : " << it->second << endl;
                }
                else {
                    cout << "반납을 취소했습니다." << endl;
                }
                return;
            }
        }
        cout << "반납 가능한 책이 없습니다." << endl;
    }

	// 대여여부를 알 수 있어야 한다. 제목, 작가, 재고 출력 
	void displayStock() {
        for (auto it : stock) {
            cout << it.first.title << " by " << it.first.author << " : " << it.second << "권 있습니다.";
            cout << "......" << maxQuantity - it.second << "권 대여중" << "..." << endl;
        }
	}
};

int main() {
    BookManager manager;
    BorrowManager borrowManager;

    // 도서관 관리 프로그램의 기본 메뉴를 반복적으로 출력하여 사용자 입력을 처리합니다.
    // 프로그램 종료를 선택하기 전까지 계속 동작합니다.
    while (true) {
        cout << "\n================도서관 관리 프로그램================" << endl;
        cout << "0. 종료" << endl; // 프로그램 종료
        cout << "1. 책 추가" << endl; // 책 정보를 입력받아 책 목록에 추가
        cout << "2. 모든 책 출력" << endl; // 현재 책 목록에 있는 모든 책 출력
        cout << "3. 제목으로 검색" << endl; // 현재 책 목록에 있는 모든 책 출력
        cout << "4. 작가로 검색" << endl; // 현재 책 목록에 있는 모든 책 출력
        cout << "5. 도서관 전체 대여 현황" << endl; 
        cout << "6. 대여" << endl; 
        cout << "7. 반납" << endl; 
        cout << "====================================================" << endl;
        cout << "선택: ";

        int choice; // 사용자의 메뉴 선택을 저장
        cin >> choice;

        if (choice == 1) {
            // 1번 선택: 책 추가
            // 사용자로부터 책 제목과 저자명을 입력받아 BookManager에 추가합니다.
            string title, author;
            cout << "책 제목: ";
            cin.ignore(); // 이전 입력의 잔여 버퍼를 제거
            getline(cin, title); // 제목 입력 (공백 포함)
            cout << "책 저자: ";
            getline(cin, author); // 저자명 입력 (공백 포함)
            manager.addBook(title, author); // 입력받은 책 정보를 추가

            // 책 목록을 관리하는 Manager클래스에서 추가된 책의 재고를 동기화
            Book* foundBook = manager.findBookByTitle(title);
            if (foundBook != nullptr) {
                borrowManager.initializeStock(*foundBook, 3);
            }
            else {
                cout << "재고 설정에 실패했습니다." << endl;
            }
        }
        else if (choice == 2) {
            // 2번 선택: 모든 책 출력
            // 현재 BookManager에 저장된 책 목록을 출력합니다.
            manager.displayAllBooks();
        }
        else if (choice == 3) {
            // 3번 선택: 책 제목으로 검색
            // 
            string title;
            cout << "검색할 책의 제목을 입력하세요 : " << endl;
            cin.ignore();
            getline(cin, title);
            manager.searchByTitle(title);

            // 바로 해당 책 대여할 것인지 물어보기
            borrowManager.borrowBook(title);
        }
        else if (choice == 4) {
            // 4번 선택: 작가 이름으로 검색
            //
            string author;
            cout << "검색할 책의 저자를 입력하세요 : " << endl;
            cin.ignore();
            getline(cin, author);
            manager.searchByAuthor(author);

            // 바로 해당 책 대여할 것인지 물어보기
            borrowManager.borrowBook(author);
        }
        else if (choice == 5) {
            // 5번 선택: 도서관 전체 대여 현황 출력.
            //
            borrowManager.displayStock();
        }
        else if (choice == 6) {
            // 6번 선택: 제목이나 작가로 대여여부 검색 및 대여.
            //
            string titleOrAuthor;
            cout << "대여할 책의 제목이나 저자의 이름을 입력하세요 : " << endl;
            cin.ignore();
            getline(cin, titleOrAuthor);
            borrowManager.borrowBook(titleOrAuthor);
        }
        else if (choice == 7) {
            // 7번 선택: 반납.
            //
            string titleOrAuthor;
            cout << "반납할 책의 제목이나 저자의 이름을 입력하세요 : " << endl;
            cin.ignore();
            getline(cin, titleOrAuthor);
            borrowManager.returnBook(titleOrAuthor);
        }
        else if (choice == 0) {
            // 0번 선택: 종료
            // 프로그램을 종료하고 사용자에게 메시지를 출력합니다.
            cout << "프로그램을 종료합니다." << endl;
            break; // while 루프 종료
        }
        else {
            // 잘못된 입력 처리
            // 메뉴에 없는 번호를 입력했을 경우 경고 메시지를 출력합니다.
            cout << "잘못된 입력입니다. 다시 시도하세요." << endl;
        }
    }

    return 0; // 프로그램 정상 종료
}
